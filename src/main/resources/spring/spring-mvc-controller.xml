<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd

        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
          http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh"/>
	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 定义文件上传解析器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设定默认编码 -->
        <property name="defaultEncoding" value="UTF-8"></property>
        <!-- 设定文件上传的最大值5MB，5*1024*1024 -->
        <property name="maxUploadSize" value="5242880"></property>
    </bean>
    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.fh.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 配置驱动使@ResponseBody注解生效 ,解决406问题-->
	<mvc:annotation-driven />
	
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
     </bean>


    <!--配置定时器-->

    <!--扫描测试定时器那一层包，下面所有类-->
    <context:component-scan base-package="com.fh.task" />
    <!--声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面,,表示使用jdk动态代理织入增强-->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <!--开启注解-->
    <context:annotation-config />
    <!-- 在applicationContext.xml中进行配置，使用定时器
        ref : pojo类的名称
        method : 调用的方式名称
        cron : cronExpression表达式
        cron="0/5 * * * * ?"  //表示五秒钟执行一次
     -->
    <!--task[分派任务]..scheduled[预定的]....tasks[派给…任务].. 派给谁在预定的时间执行分配的任务..-->
    <task:scheduled-tasks><!--0/5 * * * * ?-->

        <!--每天早上  8点42 开始-->
        <task:scheduled ref="taskCool" method="updateLoginJob" cron="0 42 08 * * ?"/>
        <!--每5秒开始一次-->
        <!--<task:scheduled ref="taskCool" method="testJob" cron="0/5 * * * * ?"/>-->
    </task:scheduled-tasks>




    <!--配置aop注解版-->

    <!--<aop:aspectj-autoproxy/>-->




     <!-- 创建bean实例，相当于创建java对象 -->
     <!--<bean id="aspectAOP" class="com.fh.shop.aspect.AspectUser"></bean>-->
     
     <!-- 配置AOP -->
     <!--<aop:config>-->
     <!--&lt;!&ndash;&lt;!&ndash; 切面 &ndash;&gt;&ndash;&gt;-->
     	<!--<aop:aspect ref="aspectAOP">-->
     		<!--&lt;!&ndash;&lt;!&ndash; 切点 &ndash;&gt;&ndash;&gt;-->
     		<!--<aop:pointcut expression="execution(* com.fh.shop.controller..*.add*(..))||execution(* com.fh.shop.controller..*.del*(..))||execution(* com.fh.shop.controller..*.update*(..))||execution(* com.fh.shop.controller..*.login(..))||execution(* com.fh.shop.controller..*.loginOut(..))"  id="pointCut"/>-->
     		<!--&lt;!&ndash;&lt;!&ndash; 环绕通知 &ndash;&gt;&ndash;&gt;-->
     		<!--<aop:around method="arpund" pointcut-ref="pointCut"/>-->
        <!--</aop:aspect>-->
     <!--</aop:config>-->
     
</beans>